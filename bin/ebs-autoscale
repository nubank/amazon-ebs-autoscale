#!/bin/sh
# Copyright Amazon.com, Inc. or its affiliates.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice,
#  this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright
#  notice, this list of conditions and the following disclaimer in the
#  documentation and/or other materials provided with the distribution.
#
#  3. Neither the name of the copyright holder nor the names of its
#  contributors may be used to endorse or promote products derived from
#  this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
#  BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
#  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
#  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.

. /opt/local/amazon-ebs-autoscale-shared-utils.sh
initialize

names=( "attached_volumes" "created_volumes" "created_size" "device_used" )
for name in "${names[@]}"; do
  file="/var/run/ebs_autoscale_$name"
  test -f $file || echo 0 > $file
done

MAX_EBS_VOLUME_SIZE=$(get_config_value .limits.max_ebs_volume_size)
MAX_LOGICAL_VOLUME_SIZE=$(get_config_value .limits.max_logical_volume_size)
MAX_EBS_VOLUME_COUNT=$(get_config_value .limits.max_ebs_volume_count)

FILE_SYSTEM=$(get_config_value .filesystem)

LVM_VG=$(get_config_value .lvm.volume_group)
LVM_LV=$(get_config_value .lvm.logical_volume)

MOUNTPOINT=$(get_config_value .mountpoint)
BASEDIR=$(dirname $0)

starting "${MOUNTPOINT} ${AWS_AZ}"
trap "stopping; exit" INT TERM KILL

# make sure that this device is mounted.
until [ -d "${MOUNTPOINT}" ]; do
  sleep 1
done

get_num_devices() {
  cat /var/run/ebs_autoscale_attached_volumes
}

# example numbers assume 100G initial disk size
# calculates percent utilization threshold for adding additional ebs volumes
# as more ebs volumes are added, the threshold level increases
calc_threshold() {
  case $1 in
    0)   echo 50 ;; # 50G  / 100G
    1)   echo 75 ;; # 187G / 250G
    2|3) echo 80 ;; # 320G / 400G, 560G / 700G
    *)   echo 90 ;; # 900G / 1T
  esac
}

# calculates the size to use for new ebs volumes to expand space
# new volume sizes increase as the number of attached volumes increase
calc_new_size() {
  case $1 in
    0|1) echo 150 ;; # 100G -> 250G, 250G -> 400G
    2|3) echo 300 ;; # 400G -> 700G, 700G ->   1T
    4|5) echo 500 ;; #   1T -> 1.5T, 1.5T ->   2T
    *)   echo $MAX_EBS_VOLUME_SIZE ;; # 2T -> 3,5T, ...
  esac
}

add_space () {
  local num_devices=$1
  if [ "${num_devices}" -ge "$MAX_EBS_VOLUME_COUNT" ]; then
    logerr "No more volumes can be safely added."
    return 0
  fi

  local curr_size=$(df -BG ${MOUNTPOINT} | grep ${MOUNTPOINT} | awk '{print $2} ' | cut -d'G' -f1)
  if [ "${curr_size}" -lt "$MAX_LOGICAL_VOLUME_SIZE" ]; then
    local vol_size=$(calc_new_size ${num_devices})
    loginfo "Extending logical volume ${MOUNTPOINT} by ${vol_size}GB"

    DEVICE=$(${BASEDIR}/create-ebs-volume --size ${vol_size} --max-attached-volumes ${MAX_EBS_VOLUME_COUNT})

    exit_status=$?
    if [ $exit_status -eq 0 ]; then
      if [ "${FILE_SYSTEM}" = "btrfs" ]; then
        loginfo "Adding device ${DEVICE} to logical volume ${MOUNTPOINT}"
        btrfs device add ${DEVICE} ${MOUNTPOINT}
        btrfs balance start -m ${MOUNTPOINT}
      else
        loginfo "Adding device ${DEVICE} to logical volume /dev/mapper/${LVM_VG}-${LVM_LV}"
        vgextend ${LVM_VG} ${DEVICE}
        for i in $(seq 3); do
          timeout -k 6 5 lvresize -l 100%VG /dev/mapper/${LVM_VG}-${LVM_LV}
          status=$?
          # 5 means LV size already matches
          if [ "$status" -ne "0" -a "$status" -ne "5" ]; then
            logerr "lvresize failed with $status, try $i"
            [ "$i" -eq "3" ] && return 1
            sleep 2
          fi
        done
        resize2fs /dev/mapper/${LVM_VG}-${LVM_LV}
      fi
      loginfo "Finished extending logical volume"

    else
      logerr "Error creating or attaching EBS volume"
    fi

  else
    logerr "Maximum volume size ($MAX_LOGICAL_VOLUME_SIZE) reached"
  fi
}

# number of event loops between utilization status log lines
# helps to limit the log file size
# utilization detection is not affected by this
LOG_INTERVAL=$(get_config_value .logging.log_interval)

# initialized value for log lines
# report on first run
LOG_COUNT=$LOG_INTERVAL

# time in seconds between event loops
# keep this low so that rapid increases in utilization are detected
DETECTION_INTERVAL=$(get_config_value .detection_interval)

function refresh() {
  NUM_DEVICES=$(get_num_devices)
  THRESHOLD=$(calc_threshold "${NUM_DEVICES}")
  STATS=$(df -BG  ${MOUNTPOINT} | grep -v Filesystem)
  TOTAL_SIZE=$(echo ${STATS} | awk '{print $2}')
  USED=$(echo ${STATS} | awk '{print $3}')
  AVAILABLE=$(echo ${STATS} | awk '{print $4}')
  PCT_UTILIZATION=$(echo ${STATS} | awk '{print $5}' | cut -d"%" -f1 -)
}

while true; do
  refresh
  if  [ $PCT_UTILIZATION -ge "${THRESHOLD}" ]; then
    loginfo "LOW DISK (${PCT_UTILIZATION}%): Adding more."
    if ! add_space "$NUM_DEVICES"; then
      logerr "Failed to add space, retrying"
      continue
    fi
    LOG_COUNT=$LOG_INTERVAL
    refresh
  fi

  if [ "${LOG_COUNT}" -ge "${LOG_INTERVAL}" ]; then
    loginfo "devices=${NUM_DEVICES} size=${TOTAL_SIZE} used=${USED} free=${AVAILABLE} util=${PCT_UTILIZATION}% thr=${THRESHOLD}%"
    LOG_COUNT=0
  fi

  LOG_COUNT=$(expr $LOG_COUNT + 1 )
  sleep $DETECTION_INTERVAL
done
